// Generated using `openapi-generator`
// DO NOT EDIT

import Foundation
public struct ChannelDetails: Codable {
    /// The required name of the channel including any qualifier, if any.
    public let channelId: String
    /// In events relating to the activity of a channel in a specific region, this optionally identifies whether or not that region is responsible for global coordination of the channel.
    public let isGlobalMaster: Bool?
    /// In events relating to the activity of a channel in a specific region, this optionally identifies the region.
    public let region: String?
    public let status: ChannelStatus?
}
/*
A ChannelStatus instance.
 */
/// A ChannelStatus instance.
public struct ChannelStatus: Codable {
    /// A required boolean value indicating whether the channel that is the subject of the event is active. For events indicating regional activity of a channel this indicates activity in that region, not global activity.
    public let isActive: Bool
    public let occupancy: Occupancy?
}
public struct DeviceDetails: Codable {
    /// Optional trusted client identifier for the device.
    public let clientId: String?
    /// Secret value for the device.
    public let deviceSecret: String?
    /// Form factor of the push device.
    public let formFactor: String?
    /// Unique identifier for the device generated by the device itself.
    public let id: String?
    /// Optional metadata object for this device. The metadata for a device may only be set by clients with push-admin privileges and will be used more extensively in the future with smart notifications.
    public let metadata: Metadata?
    /// Optional metadata object for this device. The metadata for a device may only be set by clients with push-admin privileges and will be used more extensively in the future with smart notifications.
    public struct Metadata: Codable {}
    /// Platform of the push device.
    public let platform: String?
    public let pushRecipient: Recipient?
    /// the current state of the push device.
    public let pushState: String?
}
/*
Returned error from failed REST.
 */
/// Returned error from failed REST.
public struct Error: Codable {
    /// Error code.
    public let code: Int?
    /// Link to help with error.
    public let href: String?
    /// Message explaining the error's cause.
    public let message: String?
    /// Server ID with which error was encountered.
    public let serverId: String?
    /// Status error code.
    public let statusCode: Int?
}
/*
Extras object. Currently only allows for [push](https://www.ably.io/documentation/general/push/publish#channel-broadcast-example) extra.
 */
/// Extras object. Currently only allows for [push](https://www.ably.io/documentation/general/push/publish#channel-broadcast-example) extra.
public struct Extras: Codable {
    public let push: Push?
}
/*
Message object.
 */
/// Message object.
public struct Message: Codable {
    /// The [client ID](https://www.ably.io/documentation/core-features/authentication#identified-clients) of the publisher of this message.
    public let clientId: String?
    /// The connection ID of the publisher of this message.
    public let connectionId: String?
    /// The string encoded payload, with the encoding specified below.
    public let data: String?
    /// This will typically be empty as all messages received from Ably are automatically decoded client-side using this value. However, if the message encoding cannot be processed, this attribute will contain the remaining transformations not applied to the data payload.
    public let encoding: String?
    public let extras: Extras?
    /// A Unique ID that can be specified by the publisher for [idempotent publishing](https://www.ably.io/documentation/rest/messages#idempotent).
    public let id: String?
    /// The event name, if provided.
    public let name: String?
    /// Timestamp when the message was received by the Ably, as milliseconds since the epoch.
    public let timestamp: Int?
}
public struct Notification: Codable {
    /// Text below title on the expanded notification.
    public let body: String?
    /// Platform-specific, used to group notifications together.
    public let collapseKey: String?
    /// Platform-specific icon for the notification.
    public let icon: String?
    /// Platform-specific sound for the notification.
    public let sound: String?
    /// Title to display at the notification.
    public let title: String?
}
/*
An Occupancy instance indicating the occupancy of a channel. For events indicating regional activity of a channel this indicates activity in that region, not global activity.
 */
/// An Occupancy instance indicating the occupancy of a channel. For events indicating regional activity of a channel this indicates activity in that region, not global activity.
public struct Occupancy: Codable {
    /// The number of connections that are authorised to enter members into the presence channel.
    public let presenceConnections: Int?
    /// The number of members currently entered into the presence channel.
    public let presenceMembers: Int?
    /// The number of connections that are authorised to subscribe to presence messages.
    public let presenceSubscribers: Int?
    /// The number of connections attached to the channel that are authorised to publish.
    public let publishers: Int?
    /// The number of connections attached that are authorised to subscribe to messages.
    public let subscribers: Int?
}
public struct PresenceMessage: Codable {
    /// The event signified by a PresenceMessage.
    public let action: String?
    /// The client ID of the publisher of this presence update.
    public let clientId: String?
    /// The connection ID of the publisher of this presence update.
    public let connectionId: String?
    /// The presence update payload, if provided.
    public let data: String?
    /// This will typically be empty as all presence updates received from Ably are automatically decoded client-side using this value. However, if the message encoding cannot be processed, this attribute will contain the remaining transformations not applied to the data payload.
    public let encoding: String?
    public let extras: Extras?
    /// Unique ID assigned by Ably to this presence update.
    public let id: String?
    /// Timestamp when the presence update was received by Ably, as milliseconds since the epoch.
    public let timestamp: Int?
}
public struct Push: Codable {
    /// Extends and overrides generic values when delivering via APNs. [See examples](https://www.ably.io/documentation/general/push/publish#payload-structure)
    public let apns: Apns?
    /// Extends and overrides generic values when delivering via APNs. [See examples](https://www.ably.io/documentation/general/push/publish#payload-structure)
    public struct Apns: Codable {
        public let notification: Notification?
    }
    /// Arbitrary [key-value string-to-string payload](https://www.ably.io/documentation/general/push/publish#channel-broadcast-example).
    public let data: String?
    /// Extends and overrides generic values when delivering via GCM/FCM. [See examples](https://www.ably.io/documentation/general/push/publish#payload-structure)
    public let fcm: Fcm?
    /// Extends and overrides generic values when delivering via GCM/FCM. [See examples](https://www.ably.io/documentation/general/push/publish#payload-structure)
    public struct Fcm: Codable {
        public let notification: Notification?
    }
    public let notification: Notification?
    /// Extends and overrides generic values when delivering via web. [See examples](https://www.ably.io/documentation/general/push/publish#payload-structure)
    public let web: Web?
    /// Extends and overrides generic values when delivering via web. [See examples](https://www.ably.io/documentation/general/push/publish#payload-structure)
    public struct Web: Codable {
        public let notification: Notification?
    }
}
/*
Push recipient details for a device.
 */
/// Push recipient details for a device.
public struct Recipient: Codable {
    /// Client ID of recipient
    public let clientId: String?
    /// Client ID of recipient
    public let deviceId: String?
    /// when using APNs, specifies the required device token.
    public let deviceToken: String?
    /// when using GCM or FCM, specifies the required registration token.
    public let registrationToken: String?
    /// Defines which push platform is being used.
    public let transportType: String?
}
public struct SignedTokenRequest: Codable {
    /// The [capabilities](https://www.ably.io/documentation/core-features/authentication#capabilities-explained) (i.e. a set of channel names/namespaces and, for each, a set of operations) which should be a subset of the set of capabilities associated with the key specified in keyName.
    public let capability: Capability
    /// The [capabilities](https://www.ably.io/documentation/core-features/authentication#capabilities-explained) (i.e. a set of channel names/namespaces and, for each, a set of operations) which should be a subset of the set of capabilities associated with the key specified in keyName.
    public struct Capability: Codable {}
    /// The [client ID](https://www.ably.io/documentation/core-features/authentication#identified-clients) to be assosciated with the token. Can be set to * to allow for any client ID to be used.
    public let clientId: String?
    /// Name of the key used for the TokenRequest. The keyName comprises of the app ID and key ID on an API Key.
    public let keyName: String
    /// An unquoted, un-escaped random string of at least 16 characters. Used to ensure the Ably TokenRequest cannot be reused.
    public let nonce: String
    /// Time of creation of the Ably TokenRequest.
    public let timestamp: Int
    /// A signature, generated as an HMAC of each of the above components, using the key secret value.
    public let mac: String
}
public struct TokenDetails: Codable {
    /// Regular expression representation of the capabilities of the token.
    public let capability: String?
    /// Timestamp of token expiration.
    public let expires: Int?
    /// Timestamp of token creation.
    public let issued: Int?
    /// Name of the key used to create the token
    public let keyName: String?
    /// The Ably Token.
    public let token: String?
}
public struct TokenRequest: Codable {
    /// The [capabilities](https://www.ably.io/documentation/core-features/authentication#capabilities-explained) (i.e. a set of channel names/namespaces and, for each, a set of operations) which should be a subset of the set of capabilities associated with the key specified in keyName.
    public let capability: Capability
    /// The [capabilities](https://www.ably.io/documentation/core-features/authentication#capabilities-explained) (i.e. a set of channel names/namespaces and, for each, a set of operations) which should be a subset of the set of capabilities associated with the key specified in keyName.
    public struct Capability: Codable {}
    /// The [client ID](https://www.ably.io/documentation/core-features/authentication#identified-clients) to be assosciated with the token. Can be set to * to allow for any client ID to be used.
    public let clientId: String?
    /// Name of the key used for the TokenRequest. The keyName comprises of the app ID and key ID on an API Key.
    public let keyName: String
    /// An unquoted, un-escaped random string of at least 16 characters. Used to ensure the Ably TokenRequest cannot be reused.
    public let nonce: String
    /// Time of creation of the Ably TokenRequest.
    public let timestamp: Int
}
